This file explains the three different notation methods I use to store the cube. Of course, it would be easier to understand if I used just one notation, but this complicates other things.

Firstly, I want to explain the sticker method:
The sticker method saves the cube as a multidimensional list (face number, row number, column number), storing the color of every sticker. There are 54 (6 x 9) stickers that need to be saved for the whole cube. This method is suitable to scan and display the cube, as the color of every location on the cube is immediately visible.

Example (solved cube):
cube_stickers = [[[0 0 0]
                  [0 0 0]
                  [0 0 0]]
         
                 [[1 1 1]
                  [1 1 1]
                  [1 1 1]]

                 [[2 2 2]
                  [2 2 2]
                  [2 2 2]]

                 [[3 3 3]
                  [3 3 3]
                  [3 3 3]]

                 [[4 4 4]
                  [4 4 4]
                  [4 4 4]]

                 [[5 5 5]
                  [5 5 5]
                  [5 5 5]]]

The numbers 0-5 stand for the six colors of the cube (WHITE, YELLOW, GREEN, BLUE, RED, ORANGE)

A randomly scrambled cube may look like this:
cube_stickers = [[[3 2 4]
                  [5 0 4]
                  [2 4 1]]

                 [[2 5 5]
                  [5 1 2]
                  [1 1 0]]

                 [[4 1 2]
                  [3 2 3]
                  [3 5 4]]

                 [[2 4 0]
                  [1 3 3]
                  [0 3 1]]

                 [[0 2 5]
                  [0 4 0]
                  [5 0 3]]

                 [[3 4 4]
                  [0 5 2]
                  [5 1 1]]]


And an explanation for the cubie method:
To make calculations or easily verify if a cube can be solved, the sticker-method isn't ideal. The idea of the cubie method is to store the parts of the cube which are not separable. When taking a cube apart, you don't end up with 54 individual colored tiles, but with 26 cubies, which have either 3 stickers (corner cubies), 2 stickers (edge cubies) or 1 sticker (center cubie). As turning a face moves the cubies and not the stickers individually, this method is better to use in such situations.
A saved cube must include the position and rotation of every piece (except the center ones, as they stay fixed). Edges and Corners are separated and it is built up in layers, as the cubies are three-dimensional.

Example (solved cube):
cube_cubies = [[[0, 0], [1, 0], [2, 0], [3, 0],
		[4, 0], [5, 0], [6, 0], [7, 0]],
               [[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0],
		[6, 0], [7, 0], [8, 0], [9, 0], [10, 0], [11, 0]]]

The first number in the pairs of values is the number of the cubie in a certain position, the second one is the rotation. For the 8 corners, there are 3 possible values for rotation (0, 1, 2), and for the 12 edges there are 2 options (0, 1). Corner rotation is measured by clockwise turns starting with 0 if white/yellow faces point up or down. Edges are incorrectly oriented if they require a front or back turn to get solved. That way, two requirements for the cube to be solvable are:
 - the sum of all corner rotations must be divisible by 3
 - the sum of all edge rotations (=flips) must even
The third and last rule related to the positions and is also relatively easy to check: There cannot be an odd number of total cubie swaps.

Example (the same cube as above):
cube_cubies = [[[1, 2], [2, 2], [7, 0], [6, 2],
		[4, 1], [3, 2], [5, 0], [0, 0]],
               [[10, 0], [1, 1], [5, 1], [11, 1], [8, 1], [3, 1],
		[7, 0], [2, 1], [9, 0], [6, 0], [0, 1], [4, 1]]]

This next example however is invalid, as it violates all the three rules from above:
cube_cubies = [[[0, 2], [1, 0], [2, 0], [3, 0],
		[4, 0], [5, 0], [6, 0], [7, 0]],
               [[0, 1], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0],
		[6, 0], [7, 0], [8, 0], [9, 0], [11, 0], [10, 0]]]

The get_cube_state() method of the class Cube() is responsible for the conversion between the two notation methods.

The third method I used was introduced in version 4: A linearized version of the cubie list, which improves performance when accessing the elements.

A solved Cube looks like this:
cube_cubies = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0,
               0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 11, 0]

It looks just like the nested version, but without the inner brackets.